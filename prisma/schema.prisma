// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  invitations Invitation[]
  cvs         cv[]
  jobPostings jobPosting[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String?
  name       String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int
  role       Role     @default(USER)
  accounts   Account[]
  sessions   Session[]
  cvs        cv[]
  cvReviews  cvReview[]
  jobPostings jobPosting[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?      
  token_type         String?   
  scope              String?   
  id_token           String?   
  session_state      String?   
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

model Invitation {
  id         Int      @id @default(autoincrement())
  email      String
  token      String   @unique
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int
  role       Role     @default(USER)
  status     InvitationStatus @default(PENDING)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model cv {
  id          Int       @id @default(autoincrement())
  fileName    String
  originalName String
  fileSize    Int
  fileType    String
  filePath    String
  status      CVStatus  @default(NEW)
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  jobPosting  jobPosting? @relation(fields: [jobPostingId], references: [id])
  jobPostingId Int?
  reviews     cvReview[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model jobPosting {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  requirements String
  status      JobStatus @default(ACTIVE)
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  cvs         cv[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model cvReview {
  id          Int       @id @default(autoincrement())
  cv          cv        @relation(fields: [cvId], references: [id])
  cvId        Int
  reviewer    User      @relation(fields: [reviewerId], references: [id])
  reviewerId  Int
  rating      Int       // 1-5 stars
  skills      Int       // 1-5 rating
  experience  Int       // 1-5 rating
  fit         Int       // 1-5 rating
  comments    String?
  status      ReviewStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum CVStatus {
  NEW
  IN_REVIEW
  SHORTLISTED
  INTERVIEWED
  ACCEPTED
  REJECTED
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ReviewStatus {
  PENDING
  COMPLETED
}
